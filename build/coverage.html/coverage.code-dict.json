{"/home/travis/build/npmtest/node-npmtest-angular2-infinite-scroll/test.js":"/* istanbul instrument in package npmtest_angular2_infinite_scroll */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular2-infinite-scroll/lib.npmtest_angular2_infinite_scroll.js":"/* istanbul instrument in package npmtest_angular2_infinite_scroll */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_angular2_infinite_scroll = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_angular2_infinite_scroll = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-angular2-infinite-scroll/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-angular2-infinite-scroll && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_angular2_infinite_scroll */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_angular2_infinite_scroll\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_angular2_infinite_scroll.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_angular2_infinite_scroll.rollup.js'] =\n            local.assetsDict['/assets.npmtest_angular2_infinite_scroll.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_angular2_infinite_scroll.__dirname + '/lib.npmtest_angular2_infinite_scroll.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular2-infinite-scroll/node_modules/angular2-infinite-scroll/karma.conf.js":"// Look in ./config for karma.conf.js\nmodule.exports = require('./config/karma.conf.js');\n","/home/travis/build/npmtest/node-npmtest-angular2-infinite-scroll/node_modules/angular2-infinite-scroll/config/karma.conf.js":"const singleRun = process.env.NODE_ENV !== 'bdd';\n\nmodule.exports = function(config) {\n  var testWebpackConfig = require('./webpack.test.js');\n\n  var configuration = {\n    basePath: '',\n\n    frameworks: ['jasmine'],\n\n    // list of files to exclude\n    exclude: [ ],\n\n    /*\n    * list of files / patterns to load in the browser\n    *\n    * we are building the test environment in ./spec-bundle.js\n    */\n    files: [ { pattern: './config/spec-bundle.js', watched: false } ],\n\n    preprocessors: { './config/spec-bundle.js': ['webpack', 'sourcemap'] },\n\n    // Webpack Config at ./webpack.test.js\n    webpack: testWebpackConfig,\n\n    // coverageReporter: {\n    //     dir : 'coverage/',\n    //     reporters: [\n    //         { type: 'text-summary' },\n    //         { type: 'json' },\n    //         { type: 'html' }\n    //     ]\n    // },\n\n    // Webpack please don't spam the console when running in karma!\n    webpackServer: { noInfo: true },\n\n    // reporters: [ 'mocha', 'coverage' ],\n    reporters: [ 'mocha' ],\n\n    // web server port\n    port: 9876,\n\n    colors: true,\n\n    /*\n    * level of logging\n    * possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n    */\n    logLevel: config.LOG_INFO,\n\n    autoWatch: true,\n\n    browsers: [\n      'PhantomJS'\n    ],\n\n    // customLaunchers: {\n    //   Chrome_travis_ci: {\n    //     base: 'Chrome',\n    //     flags: ['--no-sandbox']\n    //   }\n    // },\n\n    singleRun: singleRun\n  };\n\n  // if(process.env.TRAVIS){\n  //   configuration.browsers = ['Chrome_travis_ci'];\n  // }\n\n  config.set(configuration);\n};\n","/home/travis/build/npmtest/node-npmtest-angular2-infinite-scroll/node_modules/angular2-infinite-scroll/karma-test-shim.js":"/*global jasmine, __karma__, window*/\nError.stackTraceLimit = Infinity;\njasmine.DEFAULT_TIMEOUT_INTERVAL = 1000;\n\n__karma__.loaded = function () {\n};\n\n\nfunction isJsFile(path) {\n  return path.slice(-3) == '.js';\n}\n\nfunction isSpecFile(path) {\n  return path.slice(-8) == '.spec.js';\n}\n\nfunction isBuiltFile(path) {\n  var builtPath = '/base/src/';\n  return isJsFile(path) && (path.substr(0, builtPath.length) == builtPath);\n}\n\nvar allSpecFiles = Object.keys(window.__karma__.files)\n  .filter(isSpecFile)\n  .filter(isBuiltFile);\n\n// Load our SystemJS configuration.\nSystem.config({\n  baseURL: '/base'\n});\n\nSystem.config({\n  map: {\n    'rxjs': 'node_modules/rxjs',\n    '@angular': 'node_modules/@angular',\n    'app': 'src'\n  },\n  packages: {\n    'app': {\n      main: 'main.js',\n      defaultExtension: 'js'\n    },\n    '@angular/core': {\n      main: 'index.js',\n      defaultExtension: 'js'\n    },\n    '@angular/compiler': {\n      main: 'index.js',\n      defaultExtension: 'js'\n    },\n    '@angular/common': {\n      main: 'index.js',\n      defaultExtension: 'js'\n    },\n    '@angular/platform-browser': {\n      main: 'index.js',\n      defaultExtension: 'js'\n    },\n    '@angular/platform-browser-dynamic': {\n      main: 'index.js',\n      defaultExtension: 'js'\n    },\n    // '@angular/router-deprecated': {\n    //   main: 'index.js',\n    //   defaultExtension: 'js'\n    // },\n    // '@angular/router': {\n    //   main: 'index.js',\n    //   defaultExtension: 'js'\n    // },\n    'rxjs': {\n      defaultExtension: 'js'\n    }\n  }\n});\n//\n// Promise.all([\n//   // System.import('@angular/core/testing'),\n//   System.import('@angular/platform-browser-dynamic/testing')\n// ]).then(function (providers) {\n//   var testing = providers[0];\n//   var testingBrowser = providers[1];\n//\n//   testing.setBaseTestProviders(testingBrowser.TEST_BROWSER_DYNAMIC_PLATFORM_PROVIDERS,\n//     testingBrowser.TEST_BROWSER_DYNAMIC_APPLICATION_PROVIDERS);\n//\n// }).then(function() {\n//   // Finally, load all spec files.\n//   // This will run the tests directly.\n//   return Promise.all(\n//     allSpecFiles.map(function (moduleName) {\n//       return System.import(moduleName);\n//     }));\n// }).then(__karma__.start, __karma__.error);\n\n// Tun on full stack traces in errors to help debugging\n// Error.stackTraceLimit = Infinity;\n//\n// jasmine.DEFAULT_TIMEOUT_INTERVAL = 1000;\n//\n// // // Cancel Karma's synchronous start,\n// // // we will call `__karma__.start()` later, once all the specs are loaded.\n// __karma__.loaded = function() {};\n//\n// System.config({\n//     packages: {\n//         'base/dist': {\n//             defaultExtension: false,\n//             format: 'cjs',\n//             map: Object.keys(window.__karma__.files).filter(onlyAppFiles).reduce(createPathRecords, {})\n//         }\n//     }\n// });\n\nSystem.import('@angular/core/testing')\n    // .then(function(browser_adapter) { browser_adapter.BrowserDomAdapter.makeCurrent(); })\n    .then(function() { return Promise.all(resolveTestFiles()); })\n    .then(function() { __karma__.start(); }, function(error) { __karma__.error(error.stack || error); });\n\n// function createPathRecords(pathsMapping, appPath) {\n//     // creates local module name mapping to global path with karma's fingerprint in path, e.g.:\n//     // './vg-player/vg-player':\n//     // '/base/dist/vg-player/vg-player.js?f4523daf879cfb7310ef6242682ccf10b2041b3e'\n//     var pathParts = appPath.split('/');\n//     var moduleName = './' + pathParts.slice(Math.max(pathParts.length - 2, 1)).join('/');\n//     moduleName = moduleName.replace(/\\.js$/, '');\n//     pathsMapping[moduleName] = appPath + '?' + window.__karma__.files[appPath];\n//     return pathsMapping;\n// }\n//\n// function onlyAppFiles(filePath) {\n//     return /\\/base\\/dist\\/(?!.*\\.spec\\.js$).*\\.js$/.test(filePath);\n// }\n\nfunction onlySpecFiles(path) {\n  return /\\.spec\\.js$/.test(path);\n}\n\nfunction resolveTestFiles() {\n  return Object.keys(window.__karma__.files)  // All files served by Karma.\n    .filter(onlySpecFiles)\n    .filter(isBuiltFile)\n    .map(function(moduleName) {\n      // loads all spec files via their global module names (e.g.\n      // 'base/dist/vg-player/vg-player.spec')\n      return System.import(moduleName);\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-angular2-infinite-scroll/node_modules/angular2-infinite-scroll/make.js":"var pkg     = require('./package.json');\nvar path    = require('path');\nvar Builder = require('systemjs-builder');\nvar name    = pkg.name;\n\nvar builder = new Builder();\nvar config = {\n  baseURL: '.',\n  transpiler: 'typescript',\n  typescriptOptions: {\n    module: 'cjs'\n  },\n  map: {\n    typescript: './node_modules/typescript/lib/typescript.js',\n    '@angular': path.resolve('node_modules/@angular'),\n    rxjs: path.resolve('node_modules/rxjs')\n  },\n  paths: {\n    '*': '*.js'\n  },\n  meta: {\n    'node_modules/@angular/*': { build: false },\n    'node_modules/rxjs/*': { build: false }\n  },\n};\n\nbuilder.config(config);\n\nbuilder\n.bundle(name, path.resolve(__dirname, 'bundles/', name + '.js'))\n.then(function() {\n  console.log('Build complete.');\n})\n.catch(function(err) {\n  console.log('Error', err);\n});","/home/travis/build/npmtest/node-npmtest-angular2-infinite-scroll/node_modules/angular2-infinite-scroll/config/helpers.js":"/**\n * taken from angular2-webpack-starter \n */\nvar path = require('path');\n\n// Helper functions\nvar ROOT = path.resolve(__dirname, '..');\n\nfunction hasProcessFlag(flag) {\n    return process.argv.join('').indexOf(flag) > -1;\n}\n\nfunction isWebpackDevServer() {\n    return process.argv[1] && !! (/webpack-dev-server$/.exec(process.argv[1]));\n}\n\nfunction root(args) {\n    args = Array.prototype.slice.call(arguments, 0);\n    return path.join.apply(path, [ROOT].concat(args));\n}\n\nfunction checkNodeImport(context, request, cb) {\n    if (!path.isAbsolute(request) && request.charAt(0) !== '.') {\n        cb(null, 'commonjs ' + request); return;\n    }\n    cb();\n}\n\nexports.hasProcessFlag = hasProcessFlag;\nexports.isWebpackDevServer = isWebpackDevServer;\nexports.root = root;\nexports.checkNodeImport = checkNodeImport;\n","/home/travis/build/npmtest/node-npmtest-angular2-infinite-scroll/node_modules/angular2-infinite-scroll/config/spec-bundle.js":"/*\n * When testing with webpack and ES6, we have to do some extra\n * things to get testing to work right. Because we are gonna write tests\n * in ES6 too, we have to compile those as well. That's handled in\n * karma.conf.js with the karma-webpack plugin. This is the entry\n * file for webpack test. Just like webpack will create a bundle.js\n * file for our client, when we run test, it will compile and bundle them\n * all here! Crazy huh. So we need to do some setup\n */\nError.stackTraceLimit = Infinity;\n\nrequire('core-js/es6');\nrequire('core-js/es7/reflect');\n\n// Typescript emit helpers polyfill\nrequire('ts-helpers');\n\nrequire('zone.js/dist/zone');\nrequire('zone.js/dist/long-stack-trace-zone');\nrequire('zone.js/dist/async-test');\nrequire('zone.js/dist/fake-async-test');\nrequire('zone.js/dist/sync-test');\nrequire('zone.js/dist/proxy'); // since zone.js 0.6.15\nrequire('zone.js/dist/jasmine-patch'); // put here since zone.js 0.6.14\n\n// RxJS\nrequire('rxjs/Rx');\n\nvar testing = require('@angular/core/testing');\nvar browser = require('@angular/platform-browser-dynamic/testing');\n\ntesting.TestBed.initTestEnvironment(\n    browser.BrowserDynamicTestingModule,\n    browser.platformBrowserDynamicTesting()\n);\n\n/*\n * Ok, this is kinda crazy. We can use the context method on\n * require that webpack created in order to tell webpack\n * what files we actually want to require or import.\n * Below, context will be a function/object with file names as keys.\n * Using that regex we are saying look in ../src then find\n * any file that ends with spec.ts and get its path. By passing in true\n * we say do this recursively\n */\nvar testContext = require.context('../src', true, /\\.spec\\.ts/);\nconsole.log(testContext);\n\n/*\n * get all the files, for each file, call the context function\n * that will require the file and load it up here. Context will\n * loop and require those spec files here\n */\nfunction requireAll(requireContext) {\n    return requireContext.keys().map(requireContext);\n}\n\n// requires and returns all modules that match\nvar modules = requireAll(testContext);\n","/home/travis/build/npmtest/node-npmtest-angular2-infinite-scroll/node_modules/angular2-infinite-scroll/config/testing-utils.js":"/// <reference path=\"../node_modules/@types/jasmine/index.d.ts\" />\n\n/*\n Temporary fiile for referencing the TypeScript defs for Jasmine + some potentially\n utils for testing. Will change/adjust this once I find a better way of doing\n */\n\ndeclare module jasmine {\n    interface Matchers {\n        toHaveText(text: string): boolean;\n        toContainText(text: string): boolean;\n    }\n}\n\nbeforeEach(() => {\n    jasmine.addMatchers({\n\n        toHaveText: function() {\n            return {\n                compare: function(actual, expectedText) {\n                    var actualText = actual.textContent;\n                    return {\n                        pass: actualText === expectedText,\n                        get message() {\n                            return 'Expected ' + actualText + ' to equal ' + expectedText;\n                        }\n                    };\n                }\n            };\n        },\n\n        toContainText: function() {\n            return {\n                compare: function(actual, expectedText) {\n                    var actualText = actual.textContent;\n                    return {\n                        pass: actualText.indexOf(expectedText) > -1,\n                        get message() {\n                            return 'Expected ' + actualText + ' to contain ' + expectedText;\n                        }\n                    };\n                }\n            };\n        }\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-angular2-infinite-scroll/node_modules/angular2-infinite-scroll/config/webpack.test.js":"/**\n * Adapted from angular2-webpack-starter\n */\n\nconst helpers = require('./helpers');\n\n/**\n * Webpack Plugins\n */\nconst ProvidePlugin = require('webpack/lib/ProvidePlugin');\nconst DefinePlugin = require('webpack/lib/DefinePlugin');\n\nconst ENV = process.env.ENV = process.env.NODE_ENV = 'test';\n\nmodule.exports = {\n\n    /**\n     * Source map for Karma from the help of karma-sourcemap-loader &  karma-webpack\n     *\n     * Do not change, leave as is or it wont work.\n     * See: https://github.com/webpack/karma-webpack#source-maps\n     */\n    devtool: 'inline-source-map',\n\n\n    resolve: {\n        extensions: ['', '.ts', '.js'],\n        root: helpers.root('')\n    },\n\n    module: {\n\n        preLoaders: [\n            // {\n            //     test: /\\.ts$/,\n            //     loader: 'tslint-loader',\n            //     exclude: [helpers.root('node_modules')]\n            // },\n            {\n                test: /\\.js$/,\n                loader: 'source-map-loader',\n                exclude: [\n                    // these packages have problems with their sourcemaps\n                    helpers.root('node_modules/rxjs'),\n                    helpers.root('node_modules/@angular')\n                ]\n            }\n        ],\n\n        loaders: [\n            {\n                test: /\\.ts$/,\n                loader: 'awesome-typescript-loader',\n                query: {\n                    compilerOptions: {\n\n                        // Remove TypeScript helpers to be injected\n                        // below by DefinePlugin\n                        removeComments: true\n                    }\n                },\n                exclude: [/\\.e2e\\.ts$/]\n            }\n        ]\n\n        // postLoaders: [\n        //     {\n        //         test: /\\.(js|ts)$/, loader: 'istanbul-instrumenter-loader',\n        //         include: helpers.root('src'),\n        //         exclude: [\n        //             /\\.(e2e|spec)\\.ts$/,\n        //             /node_modules/\n        //         ]\n        //     }\n        // ]\n    },\n\n    plugins: [\n        new DefinePlugin({\n            'ENV': JSON.stringify(ENV),\n            'process.env': {\n                'ENV': JSON.stringify(ENV)\n            }\n        })\n    ],\n\n    tslint: {\n        emitErrors: false,\n        failOnHint: false,\n        resourcePath: 'src'\n    },\n\n\n    node: {\n        global: 'window',\n        process: false,\n        crypto: 'empty',\n        module: false,\n        clearImmediate: false,\n        setImmediate: false\n    }\n\n};\n"}